import { Model, DataTypes, Sequelize, Optional } from 'sequelize';
import { createRequire } from 'module';

const require = createRequire(import.meta.url);
const { formatInTimeZone } = require('date-fns-tz');

/**
 * Define the attributes required to create a new note. Since the `id`,
 * `createdAt` and `updatedAt` fields are generated by Sequelize, we mark
 * them as optional for creation. The `order` field controls the note's
 * stacking order on the board.
 */
export interface NoteAttributes {
  id: number;
  boardId: string;
  content: string;
  order: number;
  createdAt?: Date;
  updatedAt?: Date;
}

export type NoteCreationAttributes = Optional<NoteAttributes, 'id' | 'createdAt' | 'updatedAt'>;

/**
 * The Note model represents a single sticky note on a board. It stores the
 * note content as plain text, associates it with a board via `boardId`,
 * and records its relative ordering using the `order` field. The order is
 * a floatingâ€‘point number to allow easy repositioning between notes.
 */
export class Note extends Model<NoteAttributes, NoteCreationAttributes> implements NoteAttributes {
  public id!: number;
  public boardId!: string;
  public content!: string;
  public order!: number;
  public readonly createdAt!: Date;
  public readonly updatedAt!: Date;

  /**
   * Initializes the Note model. This should be called exactly once as part
   * of the model setup process in `models/index.ts`. Passing in the
   * Sequelize instance here avoids circular dependencies when other models
   * import Note.
   *
   * @param sequelize The Sequelize connection instance.
   */
  public static initModel(sequelize: Sequelize): typeof Note {
    Note.init(
      {
        id: {
          type: DataTypes.INTEGER.UNSIGNED,
          autoIncrement: true,
          primaryKey: true
        },
        boardId: {
          type: DataTypes.STRING,
          allowNull: false
        },
        content: {
          type: DataTypes.STRING(255),
          allowNull: false
        },
        order: {
          type: DataTypes.FLOAT,
          allowNull: false,
          unique: true
        },
        createdAt: {
          type: DataTypes.DATE,
          get() {
            return formatInTimeZone(this.getDataValue('createdAt'), 'Etc/GMT-3', "yyyy-MM-dd'T'HH:mm:ss.SSSXXX");
          }
        },
        updatedAt: {
          type: DataTypes.DATE,
          get() {
            return formatInTimeZone(this.getDataValue('updatedAt'), 'Etc/GMT-3', "yyyy-MM-dd'T'HH:mm:ss.SSSXXX");
          }
        }
      },
      {
        sequelize,
        tableName: 'notes'
      }
    );

    return Note;
  }
}